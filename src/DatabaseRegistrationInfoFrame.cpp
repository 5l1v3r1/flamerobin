/*
  The contents of this file are subject to the Initial Developer's Public
  License Version 1.0 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License here:
  http://www.flamerobin.org/license.html.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.

  The Original Code is FlameRobin (TM).

  The Initial Developer of the Original Code is Milan Babuskov.

  Portions created by the original developer
  are Copyright (C) 2004 Milan Babuskov.

  All Rights Reserved.

  $Id$

  Contributor(s): Michael Hieke
*/

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// for all others, include the necessary headers (this file is usually all you
// need because it includes almost all "standard" wxWindows headers
#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

// -*- C++ -*- generated by wxGlade 0.2.2 on Sun Jan 11 15:14:12 2004
#include "DatabaseRegistrationInfoFrame.h"
#include "frutils.h"
#include "styleguide.h"

#if wxCHECK_VERSION(2, 5, 3)
#include "wx/gbsizer.h"
#endif
//-----------------------------------------------------------------------------
DatabaseRegistrationInfoFrame::DatabaseRegistrationInfoFrame(wxWindow* parent, int id, const wxString& title, bool createDB, const wxPoint& pos, const wxSize& size, long style):
    BaseDialog(parent, id, title, pos, size, style)
{
	createM = createDB;
    label_2_copy_1 = new wxStaticText(this, -1, _("Database path:"));
    database_path_text_ctrl = new wxTextCtrl(this, ID_textcontrol_dbpath, wxT(""));
    browse_button = new wxButton(this, ID_browse_button, _("..."), wxDefaultPosition, wxDefaultSize, wxBU_EXACTFIT);
    label_3_copy_1 = new wxStaticText(this, -1, _("Username:"));
    username_text_ctrl = new wxTextCtrl(this, ID_textcontrol_username, wxT("SYSDBA"));
    label_4_copy_1 = new wxStaticText(this, -1, _("Password:"));
    password_text_ctrl = new wxTextCtrl(this, -1, wxT("masterkey"), wxDefaultPosition, wxDefaultSize, wxTE_PASSWORD);
	password_text_ctrl->SetToolTip(_("Leave empty if you wish to be prompted for password every time"));
    label_5_copy_1 = new wxStaticText(this, -1, _("Charset:"));
    const wxString charset_combo_box_choices[] = {
		wxT("NONE"),
		wxT("ASCII"),
		wxT("BIG_5"),
		wxT("CYRL"),
		wxT("DOS437"),
		wxT("DOS850"),
		wxT("DOS852"),
		wxT("DOS857"),
		wxT("DOS860"),
		wxT("DOS861"),
		wxT("DOS863"),
		wxT("DOS865"),
		wxT("EUCJ_0208"),
		wxT("GB_2312"),
		wxT("ISO8859_1"),
		wxT("ISO8859_2"),
		wxT("KSC_5601"),
		wxT("NEXT"),
		wxT("OCTETS"),
		wxT("SJIS_0208"),
		wxT("UNICODE_FSS"),
		wxT("WIN1250"),
		wxT("WIN1251"),
		wxT("WIN1252"),
		wxT("WIN1253"),
		wxT("WIN1254")
    };
    charset_combo_box = new wxComboBox(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 26, charset_combo_box_choices, wxCB_DROPDOWN|wxCB_READONLY);
    label_6_copy_1 = new wxStaticText(this, -1, _("Role:"));
    role_text_ctrl = new wxTextCtrl(this, -1, wxT(""));

	if (createM)
	{
        label_1 = new wxStaticText(this, -1, _("Page size:"));
		const wxString cb_pagesize_choices[] = {
			wxT("1024"),
			wxT("2048"),
			wxT("4096"),
			wxT("8192"),
			wxT("16384")
		};
		cb_pagesize = new wxComboBox(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 5, cb_pagesize_choices, wxCB_DROPDOWN|wxCB_READONLY);
        label_2 = new wxStaticText(this, -1, _("SQL Dialect:"));
		const wxString combo_box_2_choices[] = {
			wxT("1"),
			wxT("3")
		};
		combo_box_2 = new wxComboBox(this, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 2, combo_box_2_choices, wxCB_DROPDOWN|wxCB_READONLY);
	}

	ok_button = new wxButton(this, ID_ok_button, (createM ? _("Create") : _("Save")));
    cancel_button = new wxButton(this, ID_cancel_button, _("Cancel"));

	set_properties();
    do_layout();
	updateButtons();
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::set_properties()
{
    int wh = database_path_text_ctrl->GetMinHeight();
    browse_button->SetSize(wh, wh);
	if (createM)
	{
		cb_pagesize->SetSelection(2);
		combo_box_2->SetSelection(1);
	}
	ok_button->SetDefault();
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::do_layout()
{
#if wxCHECK_VERSION(2, 5, 3)
	// create sizer for controls
	wxGridBagSizer* sizerControls = new wxGridBagSizer(styleguide().getRelatedControlMargin(wxVERTICAL),
		styleguide().getControlLabelMargin());

	sizerControls->Add(label_2_copy_1, wxGBPosition(0, 0), wxDefaultSpan, wxALIGN_CENTER_VERTICAL);
	wxBoxSizer* sizer_r1c1_3 = new wxBoxSizer(wxHORIZONTAL);
	sizer_r1c1_3->Add(database_path_text_ctrl, 1, wxALIGN_CENTER_VERTICAL);
	sizer_r1c1_3->Add(browse_button, 0, wxLEFT|wxALIGN_CENTER_VERTICAL, styleguide().getBrowseButtonMargin());
	sizerControls->Add(sizer_r1c1_3, wxGBPosition(0, 1), wxGBSpan(1, 3), wxEXPAND);

	int dx = styleguide().getUnrelatedControlMargin(wxHORIZONTAL) - styleguide().getControlLabelMargin();
	if (dx < 0)
		dx = 0;

	sizerControls->Add(label_3_copy_1, wxGBPosition(1, 0), wxDefaultSpan, wxALIGN_CENTER_VERTICAL);
	sizerControls->Add(username_text_ctrl, wxGBPosition(1, 1), wxDefaultSpan, wxALIGN_CENTER_VERTICAL|wxEXPAND);
	sizerControls->Add(label_4_copy_1, wxGBPosition(1, 2), wxDefaultSpan, wxLEFT|wxALIGN_CENTER_VERTICAL, dx);
	sizerControls->Add(password_text_ctrl, wxGBPosition(1, 3), wxDefaultSpan, wxALIGN_CENTER_VERTICAL|wxEXPAND);

	sizerControls->Add(label_5_copy_1, wxGBPosition(2, 0), wxDefaultSpan, wxALIGN_CENTER_VERTICAL);
	sizerControls->Add(charset_combo_box, wxGBPosition(2, 1), wxDefaultSpan, wxALIGN_CENTER_VERTICAL|wxEXPAND);
	sizerControls->Add(label_6_copy_1, wxGBPosition(2, 2), wxDefaultSpan, wxLEFT|wxALIGN_CENTER_VERTICAL, dx);
	sizerControls->Add(role_text_ctrl, wxGBPosition(2, 3), wxDefaultSpan, wxALIGN_CENTER_VERTICAL|wxEXPAND);

	if (createM)
	{
		sizerControls->Add(label_1, wxGBPosition(3, 0), wxDefaultSpan, wxALIGN_CENTER_VERTICAL);
		sizerControls->Add(cb_pagesize, wxGBPosition(3, 1), wxDefaultSpan, wxALIGN_CENTER_VERTICAL|wxEXPAND);
		sizerControls->Add(label_2, wxGBPosition(3, 2), wxDefaultSpan, wxLEFT|wxALIGN_CENTER_VERTICAL, dx);
		sizerControls->Add(combo_box_2, wxGBPosition(3, 3), wxDefaultSpan, wxALIGN_CENTER_VERTICAL|wxEXPAND);
	}

	sizerControls->AddGrowableCol(1);
	sizerControls->AddGrowableCol(3);
#else
	// make all labels and controls have the same width to simulate a grid
	std::list<wxWindow*> controls;
	controls.push_back(label_2_copy_1);
	controls.push_back(label_3_copy_1);
	controls.push_back(label_5_copy_1);
	if (createM)
		controls.push_back(label_1);
	adjustControlsMinWidth(controls);
	controls.clear();

	controls.push_back(label_4_copy_1);
	controls.push_back(label_6_copy_1);
	if (createM)
		controls.push_back(label_2);
	adjustControlsMinWidth(controls);
	controls.clear();

	controls.push_back(username_text_ctrl);
	controls.push_back(password_text_ctrl);
	controls.push_back(charset_combo_box);
	controls.push_back(role_text_ctrl);
	if (createM)
		{
		controls.push_back(cb_pagesize);
		controls.push_back(combo_box_2);
		}
	adjustControlsMinWidth(controls);
	controls.clear();

	// create sizers hierarchy for controls
	wxBoxSizer* sizerRow1 = new wxBoxSizer(wxHORIZONTAL);
	sizerRow1->Add(label_2_copy_1, 0, wxALIGN_CENTER_VERTICAL);
	sizerRow1->Add(styleguide().getControlLabelMargin(), 0);
	sizerRow1->Add(database_path_text_ctrl, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);
	sizerRow1->Add(styleguide().getBrowseButtonMargin(), 0);
	sizerRow1->Add(browse_button, 0, wxALIGN_CENTER_VERTICAL);

	wxBoxSizer* sizerRow2 = new wxBoxSizer(wxHORIZONTAL);
	sizerRow2->Add(label_3_copy_1, 0, wxALIGN_CENTER_VERTICAL);
	sizerRow2->Add(styleguide().getControlLabelMargin(), 0);
	sizerRow2->Add(username_text_ctrl, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);
	sizerRow2->Add(styleguide().getUnrelatedControlMargin(wxHORIZONTAL), 0);
	sizerRow2->Add(label_4_copy_1, 0, wxALIGN_CENTER_VERTICAL);
	sizerRow2->Add(styleguide().getControlLabelMargin(), 0);
	sizerRow2->Add(password_text_ctrl, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);

	wxBoxSizer* sizerRow3 = new wxBoxSizer(wxHORIZONTAL);
	sizerRow3->Add(label_5_copy_1, 0, wxALIGN_CENTER_VERTICAL);
	sizerRow3->Add(styleguide().getControlLabelMargin(), 0);
	sizerRow3->Add(charset_combo_box, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);
	sizerRow3->Add(styleguide().getUnrelatedControlMargin(wxHORIZONTAL), 0);
	sizerRow3->Add(label_6_copy_1, 0, wxALIGN_CENTER_VERTICAL);
	sizerRow3->Add(styleguide().getControlLabelMargin(), 0);
	sizerRow3->Add(role_text_ctrl, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);

	wxBoxSizer* sizerRow4 = 0;
	if (createM)
	{
		sizerRow4 = new wxBoxSizer(wxHORIZONTAL);
		sizerRow4->Add(label_1, 0, wxALIGN_CENTER_VERTICAL);
		sizerRow4->Add(styleguide().getControlLabelMargin(), 0);
		sizerRow4->Add(cb_pagesize, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);
		sizerRow4->Add(styleguide().getUnrelatedControlMargin(wxHORIZONTAL), 0);
		sizerRow4->Add(label_2, 0, wxALIGN_CENTER_VERTICAL);
		sizerRow4->Add(styleguide().getControlLabelMargin(), 0);
		sizerRow4->Add(combo_box_2, 1, wxEXPAND|wxALIGN_CENTER_VERTICAL);
	}

	wxBoxSizer* sizerControls = new wxBoxSizer(wxVERTICAL);
	sizerControls->Add(sizerRow1, 0, wxEXPAND);
	sizerControls->Add(0, styleguide().getRelatedControlMargin(wxVERTICAL));
	sizerControls->Add(sizerRow2, 0, wxEXPAND);
	sizerControls->Add(0, styleguide().getRelatedControlMargin(wxVERTICAL));
	sizerControls->Add(sizerRow3, 0, wxEXPAND);
	if (createM)
	{
		sizerControls->Add(0, styleguide().getRelatedControlMargin(wxVERTICAL));
		sizerControls->Add(sizerRow4, 0, wxEXPAND);
	}
#endif

	// create sizer for buttons -> styleguide class will align it correctly
	wxSizer* sizerButtons = styleguide().createButtonSizer(ok_button, cancel_button);

	// use method in base class to set everything up
	layoutSizers(sizerControls, sizerButtons);
}
//-----------------------------------------------------------------------------

