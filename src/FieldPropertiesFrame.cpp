/*
  The contents of this file are subject to the Initial Developer's Public
  License Version 1.0 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License here:
  http://www.flamerobin.org/license.html.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.

  The Original Code is FlameRobin (TM).

  The Initial Developer of the Original Code is Milan Babuskov.

  Portions created by the original developer
  are Copyright (C) 2004 Milan Babuskov.

  All Rights Reserved.

  Contributor(s): Nando Dessena
*/

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// for all others, include the necessary headers (this file is usually all you
// need because it includes almost all "standard" wxWindows headers
#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif
//-----------------------------------------------------------------------------
// -*- C++ -*- generated by wxGlade 0.2.2 on Tue Aug 31 13:11:27 2004

#include "images.h"
#include "FieldPropertiesFrame.h"


FieldPropertiesFrame::FieldPropertiesFrame(wxWindow* parent, int id, wxString title, YTable *table, const wxPoint& pos, const wxSize& size, long style):
    BaseFrame(parent, id, title, pos, size, style)
{
	tableM = table;
	if (table)
		table->attach(this);
	fieldM = 0;

    // begin wxGlade: FieldPropertiesFrame::FieldPropertiesFrame
    panel_1 = new wxPanel(this, -1);
    label_8 = new wxStaticText(panel_1, -1, _("Field"));
    textctrl_fieldname = new wxTextCtrl(panel_1, ID_textctrl_fieldname, wxT(""));
    label_1 = new wxStaticText(panel_1, -1, _("Domain"));
    const wxString cb_domains_choices[] = {
        wxT(""),	// ugly hack. The control doesn't want to show big list for selection if initial list is short
        wxT(""),	//            so it looks really ugly on the screen
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT("")
    };
    cb_domains = new wxComboBox(panel_1, ID_cb_domains, wxT(""), wxDefaultPosition, wxDefaultSize, 10, cb_domains_choices, wxCB_DROPDOWN | wxCB_READONLY );
    button_edit_domain = new wxButton(panel_1, ID_button_edit_domain, _("Edit domain"));
    label_2 = new wxStaticText(panel_1, -1, _("Datatype"));
    const wxString cb_datatypes_choices[] = {
        wxT("Char"),
        wxT("Varchar"),
        wxT("Integer"),
        wxT("Smallint"),
        wxT("Numeric"),
        wxT("Decimal"),
        wxT("Float"),
        wxT("Double precision"),
        wxT("Date"),
        wxT("Time"),
        wxT("Timestamp"),
        wxT("Array"),
        wxT("Blob")
    };

    cb_datatypes = new wxComboBox(panel_1, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 13, cb_datatypes_choices, wxCB_DROPDOWN|wxCB_READONLY );
    label_3 = new wxStaticText(panel_1, -1, _("Size"));
    textctrl_size = new wxTextCtrl(panel_1, -1, wxT(""));
    label_4 = new wxStaticText(panel_1, -1, _("Scale"));
    textctrl_scale = new wxTextCtrl(panel_1, -1, wxT(""));
    cb_notnull = new wxCheckBox(panel_1, -1, _("Not null"));
    label_5 = new wxStaticText(panel_1, -1, _("Charset"));
    const wxString cb_charset_choices[] = {
		wxT("NONE"),
		wxT("ASCII"),
		wxT("BIG_5"),
		wxT("CYRL"),
		wxT("DOS437"),
		wxT("DOS850"),
		wxT("DOS852"),
		wxT("DOS857"),
		wxT("DOS860"),
		wxT("DOS861"),
		wxT("DOS863"),
		wxT("DOS865"),
		wxT("EUCJ_0208"),
		wxT("GB_2312"),
		wxT("ISO8859_1"),
		wxT("ISO8859_2"),
		wxT("KSC_5601"),
		wxT("NEXT"),
		wxT("OCTETS"),
		wxT("SJIS_0208"),
		wxT("UNICODE_FSS"),
		wxT("WIN1250"),
		wxT("WIN1251"),
		wxT("WIN1252"),
		wxT("WIN1253"),
		wxT("WIN1254")
    };
    cb_charset = new wxComboBox(panel_1, ID_cb_charset, wxT(""), wxDefaultPosition, wxDefaultSize, 26, cb_charset_choices, wxCB_DROPDOWN | wxCB_READONLY);
    label_6 = new wxStaticText(panel_1, -1, _("Collate"));
    const wxString cb_collate_choices[] = {
        wxT(""),	// ugly hack. The control doesn't want to show big list for selection if initial list is short
        wxT(""),	//            so it looks really ugly on the screen
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT("")
    };
    cb_collate = new wxComboBox(panel_1, -1, wxT(""), wxDefaultPosition, wxDefaultSize, 10, cb_collate_choices, wxCB_DROPDOWN|wxCB_READONLY );
    static_line_1 = new wxStaticLine(panel_1, -1);
    label_7 = new wxStaticText(panel_1, -1, _("Autoincrement"));
    radio_new = new wxRadioButton(panel_1, ID_radio_new, _("Create new generator, named: "));
    textctrl_generatorname = new wxTextCtrl(panel_1, ID_textctrl_generatorname, wxT(""));
    radio_existing = new wxRadioButton(panel_1, ID_radio_existing, _("Use existing generator"));
    const wxString cb_generators_choices[] = {
        wxT(""),	// ugly hack. The control doesn't want to show big list for selection if initial list is short
        wxT(""),	//            so it looks really ugly on the screen
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT(""),
        wxT("")
    };
    cb_generators = new wxComboBox(panel_1, ID_cb_generators, wxT(""), wxDefaultPosition, wxDefaultSize, 10, cb_generators_choices, wxCB_DROPDOWN|wxCB_READONLY );
    cb_trigger = new wxCheckBox(panel_1, ID_cb_trigger, _("Create trigger"));
    textctrl_sql = new wxTextCtrl(panel_1, -1, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE | wxTE_READONLY);
    button_ok = new wxButton(panel_1, ID_button_ok, _("OK"));
    button_cancel = new wxButton(panel_1, ID_button_cancel, _("Cancel"));

    set_properties();
    do_layout();
    // end wxGlade

    wxBitmap bmp = getImage32(ntColumn);
    wxIcon icon;
    icon.CopyFromBitmap(bmp);
    SetIcon(icon);

	button_cancel->SetFocus();
}
//-----------------------------------------------------------------------------
void FieldPropertiesFrame::set_properties()
{
    // begin wxGlade: FieldPropertiesFrame::set_properties
    SetSize(wxSize(397, 386));
    cb_domains->SetSelection(0);
    cb_datatypes->SetSelection(0);
    cb_charset->SetSelection(0);
    label_7->SetFont(wxFont(9, wxDEFAULT, wxNORMAL, wxBOLD, 0, wxT("")));
    radio_existing->SetValue(1);
    cb_generators->SetSelection(0);
    textctrl_sql->SetSize(wxSize(383, 150));
    // end wxGlade
}
//-----------------------------------------------------------------------------
void FieldPropertiesFrame::do_layout()
{
    // begin wxGlade: FieldPropertiesFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_10 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    sizer_4->Add(label_8, 0, wxALL|wxALIGN_CENTER_VERTICAL, 4);
    sizer_4->Add(textctrl_fieldname, 1, wxALL, 3);
    sizer_2->Add(sizer_4, 0, wxALL|wxEXPAND, 2);
    sizer_5->Add(label_1, 0, wxALL, 4);
    sizer_5->Add(cb_domains, 0, wxALL, 1);
    sizer_5->Add(button_edit_domain, 0, wxLEFT, 2);
    sizer_2->Add(sizer_5, 0, wxALL, 2);
    sizer_6->Add(label_2, 0, wxALL, 4);
    sizer_6->Add(cb_datatypes, 0, 0, 0);
    sizer_6->Add(label_3, 0, wxALL, 4);
    sizer_6->Add(textctrl_size, 0, 0, 0);
    sizer_6->Add(label_4, 0, wxALL, 4);
    sizer_6->Add(textctrl_scale, 0, 0, 0);
    sizer_2->Add(sizer_6, 0, wxALL, 2);
    sizer_7->Add(cb_notnull, 0, wxALL, 4);
    sizer_7->Add(35, 10, 0, 0, 0);
    sizer_7->Add(label_5, 0, wxALL, 4);
    sizer_7->Add(cb_charset, 0, wxRIGHT, 10);
    sizer_7->Add(label_6, 0, wxALL, 4);
    sizer_7->Add(cb_collate, 0, 0, 0);
    sizer_2->Add(sizer_7, 0, wxALL, 2);
    sizer_2->Add(static_line_1, 0, wxALL|wxEXPAND, 5);
    sizer_2->Add(label_7, 0, wxALL, 4);
    sizer_10->Add(radio_new, 0, wxALL, 3);
    sizer_10->Add(textctrl_generatorname, 1, 0, 0);
    sizer_2->Add(sizer_10, 0, wxALL|wxEXPAND, 2);
    sizer_9->Add(radio_existing, 0, wxALL, 3);
    sizer_9->Add(cb_generators, 1, 0, 0);
    sizer_2->Add(sizer_9, 0, wxALL|wxEXPAND, 2);
    sizer_8->Add(cb_trigger, 0, wxLEFT, 3);
    sizer_2->Add(sizer_8, 0, wxALL, 2);
    sizer_2->Add(textctrl_sql, 1, wxALL|wxEXPAND, 3);
    sizer_3->Add(button_ok, 0, wxALL, 3);
    sizer_3->Add(button_cancel, 0, wxALL, 3);
    sizer_2->Add(sizer_3, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    panel_1->SetAutoLayout(true);
    panel_1->SetSizer(sizer_2);
    sizer_2->Fit(panel_1);
    sizer_2->SetSizeHints(panel_1);
    sizer_1->Add(panel_1, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_1);
    sizer_1->Fit(this);
    sizer_1->SetSizeHints(this);
    Layout();
    // end wxGlade
}
//-----------------------------------------------------------------------------
