/*
  The contents of this file are subject to the Initial Developer's Public
  License Version 1.0 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License here:
  http://www.flamerobin.org/license.html.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.

  The Original Code is FlameRobin (TM).

  The Initial Developer of the Original Code is Milan Babuskov.

  Portions created by the original developer
  are Copyright (C) 2004 Milan Babuskov.

  All Rights Reserved.

  Contributor(s): Nando Dessena
*/

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// for all others, include the necessary headers (this file is usually all you
// need because it includes almost all "standard" wxWindows headers
#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

// -*- C++ -*- generated by wxGlade 0.2.2 on Fri Jun 04 12:31:56 2004
#include "ExecuteSqlFrame.h"

//! included xpm files, so that icons are compiled into executable
namespace sql_icons {
#include "new.xpm"
#include "load.xpm"
#include "save.xpm"
#include "sqlicon.xpm"
};

// Setup the Scintilla editor
// if code is regenerated by wxGlade, replace: sql_edit = new wx...
// with a call to this function
void ExecuteSqlFrame::setupEditor()
{
    sql_edit = new wxStyledTextCtrl(window_1_pane_1, ID_sql_edit);

    // Default font (12 is perhaps better for GTK, 10 is ok for MSW)
	// User can change it with Ctrl+ and Ctrl-

	#ifdef __WXGTK__
	int fontsize = 12;
	#else
	int fontsize = 10;
	#endif
    wxFont font(fontsize, wxMODERN, wxNORMAL, wxNORMAL);

    sql_edit->StyleSetFont(wxSTC_STYLE_DEFAULT, font);
    sql_edit->StyleClearAll();

    sql_edit->StyleSetForeground(0,  wxColour(0x80, 0x00, 0x00));
    sql_edit->StyleSetForeground(1,  wxColour(0x00, 0xa0, 0x00));		// multiline comment
    sql_edit->StyleSetForeground(2,  wxColour(0x00, 0xa0, 0x00));		// one-line comment
    sql_edit->StyleSetForeground(3,  wxColour(0x00, 0xff, 0x00));
    sql_edit->StyleSetForeground(4,  wxColour(0x00, 0x00, 0xff));		// number
    sql_edit->StyleSetForeground(5,  wxColour(0x00, 0x00, 0x7f));		// keyword
    sql_edit->StyleSetForeground(6,  wxColour(0x00, 0x00, 0xff));		// 'single quotes'
    sql_edit->StyleSetForeground(7,  wxColour(0xff, 0x00, 0xff));
    sql_edit->StyleSetForeground(8,  wxColour(0x00, 0x7f, 0x7f));
    sql_edit->StyleSetForeground(9,  wxColour(0xff, 0x00, 0x00));
    sql_edit->StyleSetForeground(10, wxColour(0x00, 0x00, 0x00));		// ops
    sql_edit->StyleSetForeground(11, wxColour(0x00, 0x00, 0x00));
    sql_edit->StyleSetBackground(wxSTC_STYLE_BRACELIGHT, wxColour(0xff, 0xcc, 0x00));		// brace highlight
    sql_edit->StyleSetBackground(wxSTC_STYLE_BRACEBAD, wxColour(0xff, 0x33, 0x33));		// brace bad highlight
    sql_edit->StyleSetBold(5,  TRUE);
    sql_edit->StyleSetBold(10, TRUE);
    sql_edit->StyleSetBold(wxSTC_STYLE_BRACELIGHT, TRUE);
    sql_edit->StyleSetBold(wxSTC_STYLE_BRACEBAD, TRUE);
	sql_edit->StyleSetItalic(2, TRUE);
	sql_edit->StyleSetItalic(1, TRUE);
	sql_edit->SetLexer(wxSTC_LEX_SQL);
    sql_edit->SetKeyWords(0, wxT(
			"abs action active add admin after all alter and any as asc ascending at auto autoddl "
			"avg based basename base_name before begin between bigint blob blobedit boolean both "
			"break buffer by cache cascade case cast char character character_length char_length "
			"check check_point_len check_point_length close coalesce collate collation column "
			"commit committed compiletime computed conditional connect constraint containing "
			"continue count create cstring current current_connection current_date current_role "
			"current_time current_timestamp current_transaction current_user cursor database date day "
			"db_key debug dec decimal declare default delete deleting desc descending describe "
			"descriptor disconnect display distinct do domain double drop echo edit else end entry_point "
			"escape event exception execute exists exit extern external extract false fetch file "
			"filter first float for foreign found free_it from full function gdscode generator gen_id "
			"global goto grant group group_commit_ group_commit_wait having help hour if iif "
			"immediate in inactive index indicator init inner input input_type insert inserting int "
			"integer into is isolation isql join key last lc_messages lc_type leading leave left length "
			"lev level like lock logfile log_buffer_size log_buf_size long manual max maximum "
			"maximum_segment max_segment merge message min minimum minute module_name month names national "
			"natural nchar no noauto not null nullif nulls numeric num_log_buffers num_log_bufs "
			"octet_length of on only open option or order outer output output_type overflow page pagelength "
			"pages page_size parameter password percent plan position post_event precision "
			"prepare preserve primary privileges procedure protected public quit raw_partitions "
			"rdb$db_key read real record_version recreate references release reserv reserving restrict "
			"retain return returning_values returns revoke right role rollback rows row_count "
			"runtime savepoint schema second segment select set shadow shared shell show singular size "
			"skip smallint snapshot some sort sqlcode sqlerror sqlwarning stability starting "
			"starts statement static statistics substring sub_type sum suspend table temporary "
			"terminator then ties time timestamp to trailing transaction translate translation trigger "
			"trim true type uncommitted union unique unknown update updating upper user using value "
			"values varchar variable varying version view wait wait_time weekday when whenever where "
			"while with work write year yearday" )
	);

	sql_edit->SetTabWidth(4);
	sql_edit->SetIndent(4);
	sql_edit->SetUseTabs(false);
	sql_edit->SetTabIndents(true);
	sql_edit->SetBackSpaceUnIndents(true);
	sql_edit->AutoCompSetIgnoreCase(true);
	sql_edit->AutoCompSetAutoHide(true);

	// info in ScintillaDoc.html file (in scintilla source package)
	sql_edit->SetMarginWidth(0, 40);		// turn on the linenumbers margin, set width to 40pixels
	sql_edit->SetMarginWidth(1, 0);			// turn off the folding margin
	sql_edit->SetMarginType(0, 1);			// set margin type to linenumbers
}

ExecuteSqlFrame::ExecuteSqlFrame(wxWindow* parent, int id, wxString title, const wxPoint& pos, const wxSize& size, long style):
    BaseFrame(parent, id, title, pos, size, style), YxObserver()
{
    panel_1 = new wxPanel(this, -1);
    window_1 = new wxSplitterWindow(panel_1, -1);
    window_1_pane_2 = new wxPanel(window_1, -1);
    notebook_1 = new wxNotebook(window_1_pane_2, -1, wxDefaultPosition, wxDefaultSize, 0);
    notebook_1_pane_2 = new wxPanel(notebook_1, -1);
    notebook_pane_1 = new wxPanel(notebook_1, -1);
    window_1_pane_1 = new wxPanel(window_1, -1);
    execute_sql_frame_statusbar = CreateStatusBar(4);
    button_new = new wxBitmapButton(panel_1, ID_button_new, wxBitmap(sql_icons::new_xpm));
    button_load = new wxBitmapButton(panel_1, ID_button_load, wxBitmap(sql_icons::load_xpm));
    button_save = new wxBitmapButton(panel_1, ID_button_save, wxBitmap(sql_icons::save_xpm));
    button_execute = new wxButton(panel_1, ID_button_execute, _("Execute (F9)"));
    button_commit = new wxButton(panel_1, ID_button_commit, _("Commit (F5)"));
    button_rollback = new wxButton(panel_1, ID_button_rollback, _("Rollback (F8)"));
    button_toggle = new wxButton(panel_1, ID_button_toggle, _("Toggle view"));
    button_wrap = new wxButton(panel_1, ID_button_wrap, _("Wrap"));
	setupEditor();
	stats_text_ctrl = new wxStyledTextCtrl(notebook_pane_1, -1);
	stats_text_ctrl->SetWrapMode(wxSTC_WRAP_WORD);
	stats_text_ctrl->StyleSetForeground(1, *wxRED);
	stats_text_ctrl->StyleSetForeground(2, *wxBLUE);

    set_properties();
    do_layout();
}


void ExecuteSqlFrame::set_properties()
{
    SetTitle(_("Execute SQL statements"));
    SetSize(wxSize(628, 488));
    int execute_sql_frame_statusbar_widths[] = { -2, 100, 60, -1 };
    execute_sql_frame_statusbar->SetStatusWidths(4, execute_sql_frame_statusbar_widths);
    const wxString execute_sql_frame_statusbar_fields[] = {
        wxT("user @ database"),
        wxT("rows fetched"),
        wxT("cursor position"),
        wxT("Transaction status")
    };
    for(int i = 0; i < execute_sql_frame_statusbar->GetFieldsCount(); ++i) {
        execute_sql_frame_statusbar->SetStatusText(execute_sql_frame_statusbar_fields[i], i);
    }
    data_grid = new myDataGrid(notebook_1_pane_2, ID_my_data_grid, statementM, execute_sql_frame_statusbar);
    window_1->SplitHorizontally(window_1_pane_1, window_1_pane_2);

	button_new->SetToolTip(_("New window"));
	button_load->SetToolTip(_("Load"));
	button_save->SetToolTip(_("Save"));
	button_execute->SetToolTip(_("F9 - Execute SQL statement"));
	button_commit->SetToolTip(_("F5 - Commit transaction"));
	button_rollback->SetToolTip(_("F8 - Rollback transaction"));
	button_wrap->SetToolTip(_("Wrap / unwrap text in editor"));

	window_1->Unsplit();

    wxBitmap bmp = wxBitmap(sql_icons::sqlicon_xpm);
    wxIcon icon;
    icon.CopyFromBitmap(bmp);
    SetIcon(icon);

	keywordsM = wxT("");
	closeWhenTransactionDoneM = false;
}


void ExecuteSqlFrame::do_layout()
{
    // begin wxGlade: ExecuteSqlFrame::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_2 = new wxBoxSizer(wxVERTICAL);
    wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_4 = new wxBoxSizer(wxHORIZONTAL);
    wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
    sizer_3->Add(button_new, 0, wxALL, 1);
    sizer_3->Add(button_load, 0, wxALL, 1);
    sizer_3->Add(button_save, 0, wxALL, 1);
    sizer_3->Add(10, 5, 0, 0, 0);
    sizer_3->Add(button_execute, 0, wxALL, 3);
    sizer_3->Add(button_commit, 0, wxALL, 3);
    sizer_3->Add(button_rollback, 0, wxALL, 3);
    sizer_3->Add(10, 5, 0, 0, 0);
    sizer_3->Add(button_toggle, 0, wxALL, 3);
    sizer_3->Add(button_wrap, 0, wxALL, 3);
    sizer_2->Add(sizer_3, 0, wxALL|wxEXPAND, 2);
    sizer_4->Add(sql_edit, 1, wxEXPAND, 0);
    window_1_pane_1->SetAutoLayout(true);
    window_1_pane_1->SetSizer(sizer_4);
    sizer_4->Fit(window_1_pane_1);
    sizer_4->SetSizeHints(window_1_pane_1);
    sizer_6->Add(stats_text_ctrl, 1, wxEXPAND, 0);
    notebook_pane_1->SetAutoLayout(true);
    notebook_pane_1->SetSizer(sizer_6);
    sizer_6->Fit(notebook_pane_1);
    sizer_6->SetSizeHints(notebook_pane_1);
    sizer_7->Add(data_grid, 1, wxEXPAND, 0);
    notebook_1_pane_2->SetAutoLayout(true);
    notebook_1_pane_2->SetSizer(sizer_7);
    sizer_7->Fit(notebook_1_pane_2);
    sizer_7->SetSizeHints(notebook_1_pane_2);
    notebook_1->AddPage(notebook_pane_1, _("Statistics"));
    notebook_1->AddPage(notebook_1_pane_2, _("Data"));
    sizer_5->Add(new wxNotebookSizer(notebook_1), 1, wxEXPAND, 0);
    window_1_pane_2->SetAutoLayout(true);
    window_1_pane_2->SetSizer(sizer_5);
    sizer_5->Fit(window_1_pane_2);
    sizer_5->SetSizeHints(window_1_pane_2);
    sizer_2->Add(window_1, 1, wxEXPAND, 0);
    panel_1->SetAutoLayout(true);
    panel_1->SetSizer(sizer_2);
    sizer_2->Fit(panel_1);
    sizer_2->SetSizeHints(panel_1);
    sizer_1->Add(panel_1, 1, wxEXPAND, 0);
    SetAutoLayout(true);
    SetSizer(sizer_1);
    Layout();
    // end wxGlade

	sql_edit->SetFocus();
}

