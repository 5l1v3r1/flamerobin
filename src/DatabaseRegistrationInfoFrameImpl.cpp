/*
  The contents of this file are subject to the Initial Developer's Public
  License Version 1.0 (the "License"); you may not use this file except in
  compliance with the License. You may obtain a copy of the License here:
  http://www.flamerobin.org/license.html.

  Software distributed under the License is distributed on an "AS IS"
  basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
  License for the specific language governing rights and limitations under
  the License.

  The Original Code is FlameRobin (TM).

  The Initial Developer of the Original Code is Milan Babuskov.

  Portions created by the original developer
  are Copyright (C) 2004 Milan Babuskov.

  All Rights Reserved.

  Contributor(s): Nando Dessena
*/

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// for all others, include the necessary headers (this file is usually all you
// need because it includes almost all "standard" wxWindows headers
#ifndef WX_PRECOMP
    #include "wx/wx.h"
#endif

// -*- C++ -*- generated by wxGlade 0.2.2 on Sun Jan 11 15:14:12 2004

#include "DatabaseRegistrationInfoFrame.h"
#include "ugly.h"
//-----------------------------------------------------------------------------
BEGIN_EVENT_TABLE(DatabaseRegistrationInfoFrame, BaseDialog)
	EVT_TEXT(DatabaseRegistrationInfoFrame::ID_textcontrol_dbpath, DatabaseRegistrationInfoFrame::OnSettingsChange)
	EVT_TEXT(DatabaseRegistrationInfoFrame::ID_textcontrol_username, DatabaseRegistrationInfoFrame::OnSettingsChange)
    EVT_BUTTON(DatabaseRegistrationInfoFrame::ID_ok_button, DatabaseRegistrationInfoFrame::OnOkButtonClick)
    EVT_BUTTON(DatabaseRegistrationInfoFrame::ID_cancel_button, DatabaseRegistrationInfoFrame::OnCancelButtonClick)
    EVT_BUTTON(DatabaseRegistrationInfoFrame::ID_browse_button, DatabaseRegistrationInfoFrame::OnBrowseButtonClick)
END_EVENT_TABLE()
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::OnSettingsChange(wxCommandEvent& WXUNUSED(event))
{
	if (IsShown())
		updateButtons();
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::OnOkButtonClick(wxCommandEvent& WXUNUSED(event))
{
	wxBusyCursor wait;
	databaseM->setPath(wx2std(database_path_text_ctrl->GetValue()));
	databaseM->setUsername(wx2std(username_text_ctrl->GetValue()));
	databaseM->setPassword(wx2std(password_text_ctrl->GetValue()));
	databaseM->setCharset(wx2std(charset_combo_box->GetValue()));
	databaseM->setRole(wx2std(role_text_ctrl->GetValue()));

	try
	{
		if (createM)	// create new database
		{
			int dialect = 1 + (2 * combo_box_2->GetSelection());	// 0/1 => 1/3
			wxString ps(wxT("PAGE_SIZE "));
			ps += cb_pagesize->GetValue();
			serverM->createDatabase(databaseM, wx2std(ps), dialect);
		}
		EndModal(wxOK);
	}
	catch (IBPP::Exception &e)
	{
		wxMessageBox(std2wx(e.ErrorMessage()), _("Error"), wxOK|wxICON_ERROR);
	}
	catch (...)
	{
		wxMessageBox(_("SYSTEM ERROR!\n"), _("Error"), wxOK|wxICON_ERROR);
	}
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::OnCancelButtonClick(wxCommandEvent& WXUNUSED(event))
{
	EndModal(wxCANCEL);
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::OnBrowseButtonClick(wxCommandEvent& WXUNUSED(event))
{
	wxString path = ::wxFileSelector(_("Select database file"), wxT(""), wxT(""), wxT(""),
		_("Firebird database files (*.fdb, *.gdb)|*.fdb;*.gdb|All files (*.*)|*.*"), 0, this);
	if (!path.empty())
		database_path_text_ctrl->SetValue(path);
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::setServer(YServer *s)
{
	serverM = s;
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::setDatabase(YDatabase *db)
{
	databaseM = db;
/* this could be reactivated if there is a dialog with "Don't show me again"
	if (databaseM->isConnected())
		::wxMessageBox(_("Properties of connected database cannot be changed."), _("Warning"), wxOK |wxICON_INFORMATION );
*/
 	database_path_text_ctrl->SetValue(std2wx(databaseM->getPath()));
	username_text_ctrl->SetValue(std2wx(databaseM->getUsername()));
	password_text_ctrl->SetValue(std2wx(databaseM->getPassword()));
	role_text_ctrl->SetValue(std2wx(databaseM->getRole()));
	charset_combo_box->SetSelection(charset_combo_box->FindString(std2wx(databaseM->getCharset())));
	if (charset_combo_box->GetSelection() < 0)
		charset_combo_box->SetSelection(charset_combo_box->FindString(wxT("NONE")));

	// enable controls depending on operation and database connection status
    // use SetEditable() for edit controls to allow copying text to clipboard
	bool isConnected = databaseM->isConnected();
	database_path_text_ctrl->SetEditable(!isConnected);
	browse_button->Enable(!isConnected);
	username_text_ctrl->SetEditable(!isConnected);
	password_text_ctrl->SetEditable(!isConnected);
	charset_combo_box->Enable(!isConnected);
	role_text_ctrl->SetEditable(!isConnected);
	ok_button->Enable(!isConnected);
	if (isConnected)
	{
		cancel_button->SetLabel(_("Close"));
		cancel_button->SetDefault();
	};
	updateButtons();
}
//-----------------------------------------------------------------------------
void DatabaseRegistrationInfoFrame::updateButtons()
{
	if (ok_button->IsShown())
	{
		ok_button->Enable(database_path_text_ctrl->IsEditable()
			&& !database_path_text_ctrl->GetValue().IsEmpty()
			&& !username_text_ctrl->GetValue().IsEmpty());
	}
}
//-----------------------------------------------------------------------------
const std::string DatabaseRegistrationInfoFrame::getName() const
{
    return "DatabaseRegistrationInfoFrame";
}
//-----------------------------------------------------------------------------
